# Express.js 开发规范与最佳实践

## 🎯 项目结构规范

### 目录组织
```
backend/
├── server.js          # 主服务器文件
├── package.json       # 项目配置
├── nodemon.json       # 开发环境配置
├── data.json          # 数据文件
├── routes/            # 路由模块
├── middleware/        # 中间件
├── controllers/       # 控制器
├── models/           # 数据模型
└── utils/            # 工具函数
```

## 📝 代码规范

### 1. 导入语句
```javascript
// ✅ 正确 - 使用 ES6 模块语法
import express from 'express';
import cors from 'cors';
import { readFile } from 'fs/promises';

// ❌ 错误 - 避免使用 require
const express = require('express');
```

### 2. 路由定义
```javascript
// ✅ 正确 - 清晰的路径和方法
app.get('/api/todos', async (req, res) => {
  try {
    // 处理逻辑
    res.json({ data: todos });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// ❌ 错误 - 缺少错误处理
app.get('/api/todos', (req, res) => {
  res.json(todos); // 没有错误处理
});
```

### 3. 中间件使用
```javascript
// ✅ 正确 - 按顺序配置中间件
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// 自定义中间件
app.use((req, res, next) => {
  console.log(`${req.method} ${req.path}`);
  next();
});
```

### 4. 错误处理
```javascript
// ✅ 正确 - 统一的错误处理中间件
app.use((err, req, res, next) => {
  console.error('错误:', err.stack);
  res.status(500).json({
    error: '服务器内部错误',
    message: err.message,
    timestamp: new Date().toISOString()
  });
});
```

## 🔧 开发工具配置

### 1. nodemon 配置
```json
{
  "watch": ["server.js", "routes/", "middleware/"],
  "ext": "js,json",
  "ignore": ["node_modules/", "*.test.js"],
  "env": { "NODE_ENV": "development" }
}
```

### 2. 脚本命令
```json
{
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "dev:debug": "nodemon --inspect server.js"
  }
}
```

## 🚀 API 设计规范

### 1. RESTful 路由设计
```javascript
// 资源路由
GET    /api/todos          # 获取所有待办事项
GET    /api/todos/:id      # 获取单个待办事项
POST   /api/todos          # 创建新待办事项
PUT    /api/todos/:id      # 更新待办事项
DELETE /api/todos/:id      # 删除待办事项
```

### 2. 响应格式
```javascript
// ✅ 成功响应
{
  "success": true,
  "data": [...],
  "count": 3,
  "timestamp": "2024-01-01T00:00:00.000Z"
}

// ✅ 错误响应
{
  "success": false,
  "error": "错误描述",
  "message": "详细错误信息",
  "timestamp": "2024-01-01T00:00:00.000Z"
}
```

### 3. 状态码使用
```javascript
// 常用状态码
200 - OK                    // 成功
201 - Created              // 创建成功
400 - Bad Request          // 请求错误
404 - Not Found           // 资源不存在
500 - Internal Server Error // 服务器错误
```

## 🛡️ 安全最佳实践

### 1. 输入验证
```javascript
// ✅ 验证请求数据
const validateTodo = (req, res, next) => {
  const { text } = req.body;
  if (!text || text.trim().length === 0) {
    return res.status(400).json({
      error: '待办事项内容不能为空'
    });
  }
  next();
};
```

### 2. CORS 配置
```javascript
// ✅ 安全的 CORS 配置
app.use(cors({
  origin: ['http://localhost:3000', 'http://localhost:5173'],
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  credentials: true
}));
```

## 📊 性能优化

### 1. 异步处理
```javascript
// ✅ 使用 async/await
app.get('/api/todos', async (req, res) => {
  try {
    const data = await readFile('./data.json', 'utf8');
    const todos = JSON.parse(data);
    res.json({ data: todos });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});
```

### 2. 错误边界
```javascript
// ✅ 全局错误处理
process.on('unhandledRejection', (reason, promise) => {
  console.error('未处理的 Promise 拒绝:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('未捕获的异常:', error);
  process.exit(1);
});
```

## 🧪 测试规范

### 1. 单元测试
```javascript
// 使用 Jest 或 Mocha 进行测试
describe('TODO API', () => {
  test('GET /api/todos 应该返回所有待办事项', async () => {
    const response = await request(app).get('/api/todos');
    expect(response.status).toBe(200);
    expect(response.body).toHaveProperty('data');
  });
});
```

## 📚 学习资源

### 官方文档
- Express.js: https://expressjs.com/
- Node.js: https://nodejs.org/

### 最佳实践
- 使用 ES6+ 语法
- 实现完整的错误处理
- 遵循 RESTful API 设计
- 添加适当的日志记录
- 使用环境变量管理配置

## 🎯 开发流程

1. **需求分析** - 明确 API 功能和数据结构
2. **路由设计** - 设计 RESTful 路由
3. **中间件配置** - 配置必要的中间件
4. **控制器开发** - 实现业务逻辑
5. **错误处理** - 添加错误处理机制
6. **测试验证** - 测试 API 功能
7. **文档编写** - 编写 API 文档

---

*这些规范将帮助你构建高质量、可维护的 Express.js 应用* 